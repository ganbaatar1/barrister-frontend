// üìÅ src/pages/Home.jsx

import { useEffect, useMemo, useState } from "react";
import Slider from "react-slick";
import { getHomeContent } from "../api/home";
import resolveImageUrl from "../utils/resolveImageUrl";
import useDecodedText from "../utils/useDecodedText";
//import useDecodedTexts from "../utils/useDecodedText";
import { Target, Eye, Scale, Briefcase } from "lucide-react";

// ‚öôÔ∏è Autoplay-–∏–π–Ω —Ö—É—Ä–¥—ã–≥ —ç–Ω–¥—ç—ç—Å —Ç–æ—Ö–∏—Ä—É—É–ª–Ω–∞ (–º—Å)
// .env –¥–æ—Ç–æ—Ä REACT_APP_SLIDER_AUTOPLAY_MS=6000 –≥—ç–∂ –±–∞—Å —Ç–∞–≤—å–∂ –±–æ–ª–Ω–æ
const AUTOPLAY_MS = Number(process.env.REACT_APP_SLIDER_AUTOPLAY_MS || 6000);

const baseSliderSettings = {
  dots: true,
  infinite: true,
  autoplay: true,
  autoplaySpeed: AUTOPLAY_MS, // ‚Üê —Ö—É—Ä–¥
  speed: 600,
  slidesToShow: 1,
  slidesToScroll: 1,
  arrows: false,
  pauseOnHover: true,
  adaptiveHeight: false,
};

export default function Home() {
  const [data, setData] = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    let alive = true;
    (async () => {
      try {
        const res = await getHomeContent();
        if (!alive) return;
        setData(res?.data || null);
      } catch (e) {
        console.error("–ù“Ø“Ø—Ä –∞–≥—É—É–ª–≥–∞ —Ç–∞—Ç–∞—Ö–∞–¥ –∞–ª–¥–∞–∞:", e);
      } finally {
        if (alive) setLoading(false);
      }
    })();
    return () => { alive = false; };
  }, []);

  // images –º–∞—Å—Å–∏–≤ ‚Üí fallback –Ω—å –≥–∞–Ω—Ü image —Ç–∞–ª–±–∞—Ä
  const slides = useMemo(() => {
    const imgs = Array.isArray(data?.images) ? data.images : [];
    if (imgs.length > 0) return imgs;
    if (data?.image) return [{ url: data.image, caption: "" }];
    return [];
  }, [data]);

  // –ê–≥—É—É–ª–≥—ã–Ω HTML-–∏–π–≥ decode —Ö–∏–π–Ω—ç
  const decoded = useDecodedText({
    about: data?.about || "",
    mission: data?.mission || "",
    vision: data?.vision || "",
    principles: data?.principles || "",
    services: data?.services || "",
  });

  // Slider settings (—Ö—ç—Ä–≤—ç—ç slides –±–∞–π—Ö–≥“Ø–π –±–æ–ª autoplay —É–Ω—Ç—Ä–∞–∞–Ω–∞)
  const sliderSettings = useMemo(
    () =>
      slides.length > 0
        ? baseSliderSettings
        : { ...baseSliderSettings, autoplay: false },
    [slides.length]
  );

  return (
    <div className="space-y-10">
      {/* Hero / Slider ‚Äî üí° fullscreen ”©–Ω–¥”©—Ä—Ç—ç–π */}
      <section className="relative">
        {slides.length > 0 ? (
          <Slider {...sliderSettings}>
            {slides.map((s, i) => {
              const src = resolveImageUrl(s.url);
              const caption = (s.caption || "").trim();
              return (
                <div key={i} className="relative">
                  {/* Fullscreen ”©–Ω–¥”©—Ä (—Ç–æ–º –¥—ç–ª–≥—ç—Ü –¥—ç—ç—Ä) */}
                  <img
                    src={src}
                    alt={caption || `banner-${i + 1}`}
                    className="w-full h-[70vh] md:h-[85vh] lg:h-screen object-cover"
                    loading={i === 0 ? "eager" : "lazy"}
                    decoding="async"
                  />
                  {/* üü£ –î–∞–≤—Ö–∞—Ä —Ç–µ–∫—Å—Ç –±–∞ –≥—Ä–∞–¥–∏–µ–Ω—Ç –±“Ø—Ä—Ö“Ø“Ø–ª */}
                  <div className="absolute inset-0">
                    {/* –î—ç—ç—Ä—ç—ç—Å –¥–æ–æ—à –±–∞—Ä–∞–∞–Ω –≥—Ä–∞–¥–∏–µ–Ω—Ç */}
                    <div className="absolute inset-0 bg-gradient-to-t from-black/70 via-black/30 to-transparent" />
                    {/* –î–æ–æ–¥-–∑“Ø“Ø–Ω —Ç–∞–ª–¥ —Ç–µ–∫—Å—Ç –±–ª–æ–∫ */}
                    {(caption) && (
                      <div className="absolute bottom-8 left-1/2 -translate-x-1/2 md:left-12 md:translate-x-0 max-w-3xl text-white px-4">
                        <h2 className="text-xl md:text-3xl lg:text-4xl font-semibold drop-shadow-md">
                          {caption}
                        </h2>
                        {/* –•—ç—Ä—ç–≤ —Ç–∞–π–ª–±–∞—Ä —É—Ä—Ç –±–æ–ª –¥—ç—ç–¥ —Ç–∞–ª–¥ –∑–∞–π */}
                        <p className="mt-3 text-sm md:text-base lg:text-lg opacity-90">
                          {/* –•“Ø—Å–≤—ç–ª —ç–Ω–¥ –Ω—ç–º—ç–ª—Ç –±–æ–≥–∏–Ω–æ —Ç–∞–Ω–∏–ª—Ü—É—É–ª–≥–∞ —ç—Å–≤—ç–ª CTA –±–∞–π—Ä–ª—É—É–ª–∂ –±–æ–ª–Ω–æ */}
                        </p>
                      </div>
                    )}
                  </div>
                </div>
              );
            })}
          </Slider>
        ) : (
          // Fallback hero
          <div className="w-full h-[60vh] md:h-[80vh] lg:h-screen bg-gray-200 dark:bg-gray-800 flex items-center justify-center">
            <div className="text-center px-4">
              <div className="text-xl md:text-2xl font-semibold">–ó—É—Ä–∞–≥ –æ–¥–æ–æ–≥–æ–æ—Ä –∞–ª–≥–∞</div>
              <p className="text-gray-600 dark:text-gray-300 mt-2">
                –ê–¥–º–∏–Ω —Ç–∞–ª–∞–∞—Å –∑—É—Ä–∞–≥ –Ω—ç–º—Å–Ω—ç—ç—Ä —ç–Ω–¥ –∞–≤—Ç–æ–º–∞—Ç–∞–∞—Ä —Ö–∞—Ä–∞–≥–¥–∞–Ω–∞.
              </p>
            </div>
          </div>
        )}
      </section>

      {/* About */}
      <section className="max-w-6xl mx-auto px-4">
        <h2 className="text-2xl md:text-3xl font-bold mb-4">–ë–∏–¥–Ω–∏–π —Ç—É—Ö–∞–π</h2>
        {loading ? (
          <SkeletonLines />
        ) : (
          <div
            className="prose max-w-none dark:prose-invert prose-p:leading-7"
            dangerouslySetInnerHTML={{ __html: decoded.about || "" }}
          />
        )}
      </section>

      {/* Mission / Vision / Principles / Services ‚Äî –¥—ç–ª–≥—ç—Ü–Ω—ç—ç—Å —Ö–∞–º–∞–∞—Ä–∞–Ω grid/stack */}
      <section className="max-w-6xl mx-auto px-4">
        <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-4">
          <Card title="–≠—Ä—Ö—ç–º –∑–æ—Ä–∏–ª–≥–æ" icon={<Target className="w-6 h-6" />} html={decoded.mission} loading={loading} />
          <Card title="–ê–ª—Å—ã–Ω —Ö–∞—Ä–∞–∞" icon={<Eye className="w-6 h-6" />} html={decoded.vision} loading={loading} />
          <Card title="“Æ–Ω–¥—Å—ç–Ω –∑–∞—Ä—á–∏–º" icon={<Scale className="w-6 h-6" />} html={decoded.principles} loading={loading} />
          <Card title="“Æ–π–ª—á–∏–ª–≥—ç—ç–Ω–∏–π —á–∏–≥–ª—ç–ª“Ø“Ø–¥" icon={<Briefcase className="w-6 h-6" />} html={decoded.services} loading={loading} />
        </div>
      </section>
    </div>
  );
}

function Card({ title, icon, html, loading }) {
  return (
    <div className="rounded-xl border border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-900 p-5 shadow-sm">
      <div className="flex items-center gap-2 mb-3">
        <div className="p-2 rounded-lg bg-gray-100 dark:bg-gray-800">{icon}</div>
        <h3 className="text-lg font-semibold">{title}</h3>
      </div>
      {loading ? (
        <SkeletonLines small />
      ) : (
        <div
          className="prose prose-sm max-w-none dark:prose-invert prose-ul:mt-2 prose-li:my-1"
          dangerouslySetInnerHTML={{ __html: html || "" }}
        />
      )}
    </div>
  );
}

function SkeletonLines({ small = false }) {
  return (
    <div className="space-y-2 animate-pulse">
      <div className={`rounded ${small ? "h-3" : "h-4"} bg-gray-200 dark:bg-gray-700 w-11/12`} />
      <div className={`rounded ${small ? "h-3" : "h-4"} bg-gray-200 dark:bg-gray-700 w-10/12`} />
      <div className={`rounded ${small ? "h-3" : "h-4"} bg-gray-200 dark:bg-gray-700 w-8/12`} />
    </div>
  );
}
