// üìÅ src/utils/resolveImageUrl.js
const API_BASE = process.env.REACT_APP_API_BASE_URL || "";
const STATIC_URL = process.env.REACT_APP_STATIC_URL || "";

// API_BASE = "https://.../api" –±–æ–ª /api-–∏–π–≥ –∞–≤—á “Ø–Ω–¥—ç—Å –±–æ–ª–≥–æ–∂ –±–∞–π–Ω–∞
const RAW_BASE = API_BASE ? API_BASE.replace(/\/api\/?$/, "") : STATIC_URL;
// “Æ–Ω–¥—Å—ç–Ω base URL (—Ö–æ–æ—Å–æ–Ω –±–∞–π–≤–∞–ª production-–∏–π–Ω backend-–∏–π–≥ –∞—à–∏–≥–ª–∞—è)
const IMAGE_BASE = (RAW_BASE || "https://barrister-backend.onrender.com").replace(/\/$/, "");

// –¢—É—Å–ª–∞—Ö —à–∞–ª–≥–∞–ª—Ç—É—É–¥
const isCloudinary = (u = "") => /^https?:\/\/res\.cloudinary\.com\//i.test(u);
const isLocalhostHost = (h = "") => h === "localhost" || h === "127.0.0.1";

/**
 * –ó—É—Ä–≥–∏–π–Ω URL-—ã–≥ production-–¥ –∞—é—É–ª–≥“Ø–π –±–æ–ª–≥–æ–∂ —Ö—É–≤–∏—Ä–≥–∞–Ω–∞:
 * - Cloudinary –±–æ–ª —à—É—É–¥ –±—É—Ü–∞–∞–Ω–∞
 * - localhost –±–æ–ª /uploads –º”©—Ä–∏–π–≥ IMAGE_BASE –¥—ç—ç—Ä join —Ö–∏–π–∂ ”©”©—Ä—á–∏–ª–Ω”©
 * - http –±–æ–ª https –±–æ–ª–≥–æ–∂ –∞–ª–±–∞–¥–Ω–∞
 * - relative (/uploads/..) –±–æ–ª IMAGE_BASE –¥—ç—ç—Ä join —Ö–∏–π–Ω—ç
 */
export default function resolveImageUrl(input) {
  if (!input) return ""; // placeholder-–≥“Ø–π–≥—ç—ç—Ä –∑—É—Ä–∞–≥ —Ä–µ–Ω–¥—ç—Ä–ª—ç—Ö–≥“Ø–π

  try {
    // –ê–±—Å–æ–ª—é—Ç URL
    if (/^https?:\/\//i.test(input)) {
      if (isCloudinary(input)) return input;

      const u = new URL(input);

      // Localhost –±–æ–ª production base-—Ä—É—É —à–∏–ª–∂“Ø“Ø–ª—å–µ (/uploads-—ã–≥ —Ö–∞–¥–≥–∞–ª–Ω–∞)
      if (isLocalhostHost(u.hostname)) {
        return `${IMAGE_BASE}${u.pathname}${u.search || ""}${u.hash || ""}`;
      }

      // http ‚Üí https –∞–ª–±–∞–¥–∞–ª—Ç (mixed content-–æ–æ—Å —Å—ç—Ä–≥–∏–π–ª–Ω—ç)
      if (u.protocol === "http:") {
        return `https://${u.host}${u.pathname}${u.search || ""}${u.hash || ""}`;
      }
      return input;
    }

    // –•–∞—Ä—å—Ü–∞–Ω–≥—É–π –∑–∞–º (/uploads/.., uploads/..)
    const path = input.startsWith("/") ? input : `/${input}`;
    return `${IMAGE_BASE}${path}`;
  } catch {
    // URL parse –∞–ª–¥–∞–∞ –≥–∞—Ä–≤–∞–ª —ç–Ω–≥–∏–π–Ω join
    const p = String(input || "");
    if (!p) return "";
    return `${IMAGE_BASE}${p.startsWith("/") ? "" : "/"}${p}`;
  }
}

// –•—ç—Ä—ç–≥—Ü—ç—ç—Ç—ç–π –±–æ–ª –≥–∞–¥–Ω–∞–∞—Å –∞—à–∏–≥–ª–∞—Ö–∞–∞—Ä export —Ö–∏–π–∂ –±–æ–ª–Ω–æ
export { isCloudinary };
