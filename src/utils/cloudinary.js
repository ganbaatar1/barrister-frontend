// üìÅ src/utils/cloudinary.js
const CLOUD = process.env.REACT_APP_CLOUDINARY_CLOUD_NAME;      // –∂: djam1etvx
const PRESET = process.env.REACT_APP_CLOUDINARY_UPLOAD_PRESET;  // –∂: barrister_unsigned
const DEFAULT_FOLDER = process.env.REACT_APP_CLOUDINARY_FOLDER || "barrister";

/**
 * Cloudinary —Ä—É—É UNSIGNED upload
 * @param {File|Blob|string} file - File/Blob —ç—Å–≤—ç–ª http(s)/data: URL
 * @param {string} folder
 * @param {number} timeoutMs - default 25s
 * @returns {Promise<{ secure_url: string, public_id: string }>}
 */
export async function cloudinaryUpload(file, folder = DEFAULT_FOLDER, timeoutMs = 25000) {
  if (!CLOUD || !PRESET) {
    throw new Error("Cloudinary ENV —Ç–æ—Ö–∏—Ä–≥–æ–æ –¥—É—Ç—É—É –±–∞–π–Ω–∞ (cloud name / upload preset).");
  }
  if (!file) throw new Error("Upload —Ö–∏–π—Ö —Ñ–∞–π–ª —Ö–æ–æ—Å–æ–Ω –±–∞–π–Ω–∞.");

  const url = `https://api.cloudinary.com/v1_1/${CLOUD}/image/upload`;
  const fd = new FormData();

  // File/Blob —ç—Å–≤—ç–ª string (http/https/data:) —Ö–æ—ë—É–ª–∞–Ω–≥ –Ω—å –¥—ç–º–∂–∏–Ω—ç
  fd.append("file", file);
  fd.append("upload_preset", PRESET);
  if (folder) fd.append("folder", folder);

  // –°–æ–Ω–≥–æ–ª—Ç: –∏–ª“Ø“Ø —Ü—ç–≥—Ü—Ç—ç–π public filename —Ö“Ø—Å–≤—ç–ª preset –¥—ç—ç—Ä—ç—ç –∑”©–≤—à”©”©—Ä”©”©–¥:
  // fd.append("use_filename", "true");
  // fd.append("unique_filename", "true");

  // –°–æ–Ω–≥–æ–ª—Ç: alt (SEO)
  try {
    const name = typeof file === "object" && "name" in file ? file.name : "image";
    fd.append("context", `alt=${name}`);
  } catch (_) {}

  // Timeout —Ö–∞–º–≥–∞–∞–ª–∞–ª—Ç
  const ac = new AbortController();
  const t = setTimeout(() => ac.abort(), timeoutMs);

  let res, json;
  try {
    res = await fetch(url, { method: "POST", body: fd, signal: ac.signal });
  } catch (netErr) {
    clearTimeout(t);
    // fetch ”©”©—Ä”©”© —É–Ω–∞—Ö (—Å“Ø–ª–∂—ç—ç —Ç–∞—Å–∞—Ä—Å–∞–Ω, abort, –≥—ç—Ö –º—ç—Ç)
    throw new Error(`–°“Ø–ª–∂—ç—ç–Ω–∏–π –∞–ª–¥–∞–∞/—Ç–∞–π–º–∞—É—Ç: ${netErr?.message || netErr}`);
  } finally {
    clearTimeout(t);
  }

  // Cloudinary –∏—Ö—ç–Ω—Ö–¥—ç—ç JSON –±—É—Ü–∞–∞–¥–∞–≥ ‚Äî —ç—Ö–ª—ç—ç–¥ JSON —É–Ω—à–∞–∞–¥, –±–æ–ª–æ—Ö–≥“Ø–π –±–æ–ª text
  try {
    json = await res.json();
  } catch {
    const text = await res.text().catch(() => "");
    if (!res.ok) throw new Error(`Cloudinary upload –∞–ª–¥–∞–∞: ${res.status} ${text || ""}`);
    // OK –º”©—Ä—Ç–ª”©”© JSON –±–∏—à –∏—Ä–≤—ç–ª text-–≥ –±—É—Ü–∞–∞—Ö–≥“Ø–π, –±–∞–≥—Ü–ª–∞–∞–¥ ”©–≥—å–µ
    return { secure_url: "", public_id: "", raw: text };
  }

  if (!res.ok) {
    // –¢“Ø–≥—ç—ç–º—ç–ª: Invalid upload preset / Missing file / Invalid Signature
    const msg = json?.error?.message || `Upload failed (${res.status})`;
    throw new Error(msg);
  }

  return json; // { asset_id, public_id, secure_url, ... }
}

// –ê—à–∏–≥—Ç–∞–π –∂–∏–∂–∏–≥ —à–∞–ª–≥–∞–ª—Ç
export const isCloudinaryUrl = (u = "") => /^https?:\/\/res\.cloudinary\.com\//i.test(u);
